[{"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/reportWebVitals.js":"1","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/App.js":"2","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/BarChart.js":"3","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/Circle.js":"4","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/index.js":"5","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/data/mockData.js":"6","/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/views/Dashboard.js":"7","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/App.js":"8","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/data/mockData.js":"9","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/Dashboard.js":"10","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/reportWebVitals.js":"11","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/MainLayout.js":"12","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/index.js":"13","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/components/SimulationForm.js":"14"},{"size":362,"mtime":1607031838599,"results":"15","hashOfConfig":"16"},{"size":1963,"mtime":1607436332564,"results":"17","hashOfConfig":"16"},{"size":1560,"mtime":1607036866046,"results":"18","hashOfConfig":"16"},{"size":238,"mtime":1607035286364,"results":"19","hashOfConfig":"16"},{"size":500,"mtime":1607031838597,"results":"20","hashOfConfig":"16"},{"size":1809,"mtime":1607435973925,"results":"21","hashOfConfig":"16"},{"size":2519,"mtime":1607445013921,"results":"22","hashOfConfig":"16"},{"size":2195,"mtime":1610489290134,"results":"23","hashOfConfig":"24"},{"size":1902,"mtime":1610479534642,"results":"25","hashOfConfig":"24"},{"size":2195,"mtime":1610495045757,"results":"26","hashOfConfig":"24"},{"size":362,"mtime":1610479534670,"results":"27","hashOfConfig":"24"},{"size":10680,"mtime":1610529979852,"results":"28","hashOfConfig":"24"},{"size":455,"mtime":1610479534668,"results":"29","hashOfConfig":"24"},{"size":20178,"mtime":1610530453990,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1si8j8n",{"filePath":"34","messages":"35","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"1ug1myt",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/reportWebVitals.js",[],["65","66"],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/App.js",["67","68","69","70","71","72","73","74","75","76","77","78","79"],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/BarChart.js",["80","81","82"],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/Circle.js",[],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/index.js",[],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/data/mockData.js",[],"/Users/aminamanafli/Documents/cs-project/visualization/graph-visual/src/views/Dashboard.js",["83"],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/App.js",["84","85","86","87","88","89","90","91","92","93","94","95"],"import './App.css';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport Dashboard from './views/Dashboard';\nimport Layout from \"./views/MainLayout\";\nfunction App() {\n\n  function genRandomTree(N = 300, reverse = false) {\n    return {\n      nodes: [...Array(N).keys()].map(i => ({ id: i })),\n        links: [...Array(N).keys()]\n      .filter(id => id)\n      .map(id => ({\n        [reverse ? 'target' : 'source']: id,\n        [reverse ? 'source' : 'target']: Math.round(Math.random() * (id-1))\n      }))\n    };\n  }\n\n  var myData = require('./data/miserables.json'); //with path\n  var testData = require('./data/test.json'); //with path\n\n  var randomData = genRandomTree(500, false);\n  const getColor = n => '#' + ((n * 1234567) % Math.pow(2, 24)).toString(16).padStart(6, '0');\n  \n  // states: 0 - susceptible, 1 - asymptomatic, 2 - infected, 3 - vaccinated, 4 - rehabed\n  const getStateColor = (n) => {\n    switch (n) {\n      case 0:\n        return '#03c4a1';\n      case 1:\n        return '#590995';\n      case 2:\n        return '#c62a88';\n      case 3:\n        return '#61b15a';\n      case 4:\n        return '#150485';\n      default:\n        return '#33b2ff';\n    }\n  } \n  // console.log(testData);\n  const { useRef } = React;\n  const fgRef = useRef();\n\n  return (\n    <div className=\"App\">\n      {/* <section className=\"Main\" >\n        <h3>Test Data (with states)</h3>\n        <ForceGraph2D \n          graphData={testData} \n          enableZoomPanInteraction={false}\n          nodeLabel=\"state\"\n          nodeCanvasObject={({ state, x, y }, ctx) => {\n            ctx.fillStyle = getStateColor(state);\n            ctx.beginPath(); ctx.arc(x, y, 5, 0, 2 * Math.PI, false); ctx.fill(); // circle\n          }}\n        />\n        <h3>Randomly Generated Data</h3>\n        <ForceGraph2D \n          ref={fgRef}\n          graphData={randomData} \n          enableZoomPanInteraction={false}\n          nodeLabel=\"state\"\n          nodeAutoColorBy={d => d.id%5}\n          onEngineStop={() => fgRef.current.zoomToFit(400)}\n        />\n        <Dashboard />\n      </section> */}\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n",["96","97"],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/data/mockData.js",[],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/Dashboard.js",["98","99","100","101"],"import React, { Component } from 'react';\nimport classes from \"./Dashboard.module.css\";\nimport { managerData, nationalAverageData, yearLabels } from \"../data/mockData\";\nimport { Line } from 'react-chartjs-2';\nimport { Button, Space } from 'antd';\n\nconst getLineColor = (n) => {\n    switch (n) {\n      case 's':\n        return '#ecb01f';\n      case 'a':\n        return '#d85218';\n      case 'i':\n        return '#0071bc';\n      case 'v':\n        return '#7d2e8d';\n      case 'r':\n        return '#76ab2f';\n      default:\n        return '#33b2ff';\n    }\n}\n\nconst lineSettings = {\n    // label: 'Test Dataset 1',\n    fill: false,\n    lineTension: 0.2,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    // borderColor: '#590995',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    // pointBorderColor: '#590995',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    // data: this.props.data.data.s,\n  }\n\nexport default class Dashboard extends Component {\n    render() {\n        console.log(\"plot props: \", this.props.data);\n        const newData = {\n            labels: this.props.data.labels,\n            datasets: Object.keys(this.props.data.data).map(key => {\n                const color = getLineColor(key);\n                return {\n                    ...lineSettings,\n                    label: key,\n                    borderColor: color,\n                    pointBorderColor: color,\n                    data: this.props.data.data[key],\n                }\n            })\n        }\n        return (\n            <div className={classes.container}>\n                <Space direction=\"vertical\">\n                    <div className={classes.graphContainer}>\n                        <Line\n                            data={newData}\n                        />\n                    </div>\n                    {/* <Button onClick={this.addChartData}>Add Data 1</Button> */}\n                </Space>\n            </div>\n        )\n    }\n}","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/reportWebVitals.js",[],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/views/MainLayout.js",["102","103","104","105","106","107","108","109","110","111","112","113","114","115"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport 'antd/dist/antd.css';\nimport classes from './MainLayout.module.css';\nimport { Layout, Menu, Breadcrumb, Card, Space, Button, Switch} from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport Dashboard from './Dashboard';\nimport SimulationForm from '../components/SimulationForm';\n\n// https://medium.com/@jjsincorporated/how-i-built-conways-game-of-life-with-react-hooks-3bc6c2734aa\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\nvar testData = require('../data/test.json'); //with path\nconst getStateColor = (n) => {\n    switch (n) {\n        //susceptible\n      case 0:\n        return '#ecb01f';\n        //asymptomatic\n      case 1:\n        return '#d85218';\n        //infected\n      case 2:\n        return '#0071bc';\n        //vaccinated\n      case 3:\n        return '#7d2e8d';\n        //removed\n      case 4:\n        return '#76ab2f';\n      default:\n        return '#33b2ff';\n    }\n  }\n  \nfunction genRandomTree(N = 300, reverse = false) {\nreturn {\n    nodes: [...Array(N).keys()].map(i => ({ id: i })),\n    links: [...Array(N).keys()]\n    .filter(id => id)\n    .map(id => ({\n    [reverse ? 'target' : 'source']: id,\n    [reverse ? 'source' : 'target']: Math.round(Math.random() * (id-1)/2)\n    }))\n};\n}\n\nvar randomData = genRandomTree(100, false);\nconst initPlotData = {\n    data: {\n        s: [],\n        a: [],\n        i: [],\n        v: [],\n        r: [],\n    },\n    labels: []\n};\n\nfunction MainLayout() {\n    const graphDataRef = useRef({});\n    const [plotData, setPlotData] = useState({\n        data: {\n            s: [],\n            a: [],\n            i: [],\n            v: [],\n            r: [],\n        },\n        labels: []\n    });\n    \n    const [timeline, setTimeline] = useState();\n    const [frameNumber, setFrameNumber] = useState(0);\n\n    console.log('plotData', plotData);\n\n    const updateData = useCallback((response, resetPlot, plotValues) => {\n        // const state = {...plotData};\n        // console.log('plotValues in updateData', plotValues);\n        // console.log('plotData in updateData', plotData);\n\n        if (!graphDataRef.current.nodes) {\n            graphDataRef.current = response.graph;\n        } else {\n            for (let i = 0; i < graphDataRef.current.nodes.length; i++) {\n                graphDataRef.current.nodes[i].state = response.graph.nodes[i].state;\n            }\n        }\n        const plot = response.plot;\n        \n        // if (resetPlot) {\n        //     console.log(\"resetting plot\");\n        //     setPlotData({\n        //         data: {\n        //             s: [plot.s],\n        //             a: [plot.a],\n        //             i: [plot.i],\n        //             v: [plot.v],\n        //             r: [plot.r],\n        //         },\n        //         labels: [0]\n        //     });\n        // } else {\n            // console.log(\"plotData s \", plotData.data.s);\n            // console.log(\"plot\", plot);\n            const state = {\n                data: {\n                    s: [...plotData.data.s, plot.s],\n                    a: [...plotData.data.a, plot.a],\n                    i: [...plotData.data.i, plot.i],\n                    v: [...plotData.data.v, plot.v],\n                    r: [...plotData.data.r, plot.r],\n                },\n                labels: [...plotData.labels, plotData.labels.length],\n            };\n            // console.log(\"new state: \", state);\n            setPlotData(state);\n            // state.data.s = [...state.data.s, plot.s];\n            // state.data.a = [...state.data.a, plot.a];\n            // state.data.i = [...state.data.i, plot.i];\n            // state.data.v = [...state.data.v, plot.v];\n            // state.data.r = [...state.data.r, plot.r];\n            // state.labels = [...state.labels, state.labels.length];    \n            // setPlotData(state);\n        // }\n        \n    }, [plotData]);\n\n    // async function fetchTimelineData(endpoint, method, reset) {\n    const fetchTimelineData = useCallback(async (endpoint, method, reset) => {\n        const request = await fetch(endpoint, {method: method});\n        const response = await request.json();\n        // console.log(\"response timeline: \", response);\n        console.log('plotData in fetchTimeLine', plotData);\n        if (reset) {\n            graphDataRef.current.nodes = undefined;\n            graphDataRef.current.links = undefined;\n        }\n        setTimeline(response.graph.nodes_timeline);\n        // console.log(\"initplotdata\", initPlotData);\n        updateData({\n            graph: {\n                nodes: response.graph.nodes_timeline[0].nodes,\n                links: response.graph.links,\n            },\n            plot: response.plot\n        }, true, plotData);\n        setPlotData({\n            data: {\n                s: [response.plot.s],\n                a: [response.plot.a],\n                i: [response.plot.i],\n                v: [response.plot.v],\n                r: [response.plot.r],\n            },\n            labels: [0]\n        });\n    }, [plotData]);\n\n    async function fetchData(endpoint, method, reset) {\n        const request = await fetch(endpoint, {method: method});\n        const response = await request.json();\n        // console.log(\"response: \", response);\n        if (reset) {\n            graphDataRef.current.nodes = undefined;\n            graphDataRef.current.links = undefined;\n        }\n        updateData(response, true);\n    }\n\n    useEffect(async () => {\n        fetchData(\"/api/simulation\", \"post\");\n    }, []);\n\n    const runTimeline = useCallback(async () => {\n        for (let i = 1; i < timeline.length; i++) {\n            const upd = {\n                graph: {\n                    nodes: timeline[i].nodes,\n                    links: graphDataRef.current.links,\n                }, \n                plot: {\n                    s: Math.round(Math.random()*20 + 90),\n                    a: Math.round(Math.random()*10 + 5),\n                    i: Math.round(Math.random()*10 + 1),\n                    v: Math.round(Math.random()*10 + 10),\n                    r: Math.round(Math.random()*10 + 20),\n                }\n            };\n\n            console.log('plotData in runTimeline', plotData);\n            updateData(upd, false, plotData);\n            setFrameNumber(i);\n            await sleep(200);\n            // setTimeout(() => {\n            //     updateData(upd);\n            // }, 500);\n            console.log(\"frame = \", i);\n        }\n\n    }, [plotData]);\n    \n\n    const requestData = async () => {\n        const request = await fetch(\"/api/simulation\", {method: 'put'});\n        const response = await request.json();\n        updateData(response);   \n    }\n\n    return(\n        <Layout>\n            <Header className=\"header\" style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n                <h2 style={{\n                    marginTop: '8px', \n                    color: 'white', \n                    fontWeight: '250',\n                    margin: '8px 10px 10px -25px',\n            \n                    }}>Covid-19 Simulator</h2>\n                <Menu theme=\"dark\" mode=\"horizontal\"\n                defaultSelectedKeys={['simulator']}>\n                    {/* <Menu.Item key=\"1\">Home</Menu.Item> */}\n                    <Menu.Item key=\"simulator\">Simulator</Menu.Item>\n                    <Menu.Item key=\"about\">About</Menu.Item>\n                </Menu>\n            </Header>\n            <Layout>\n                <Layout style={{ padding: '64px 24px 24px'}} >\n                        <Breadcrumb style={{ margin: '16px 0', textAlign: \"left\"}}>\n                            <Breadcrumb.Item>Simulator</Breadcrumb.Item>\n                            <Breadcrumb.Item>Graph-based</Breadcrumb.Item>\n                            {/* <Breadcrumb.Item>Simulation</Breadcrumb.Item> */}\n                        </Breadcrumb>\n                        <Content   \n                            className=\"site-layout-background\"\n                            style={{\n                                padding: 24,\n                                margin: 0,\n                                minHeight: 280,\n                            }}\n                        >\n                            <Space direction=\"horizontal\">\n                                <Card bordered>\n                                    <h3>Agents Graph <small>(Frame: {frameNumber})</small></h3>\n                                    {graphDataRef.current.nodes && (\n                                        <ForceGraph2D \n                                            height={500}\n                                            width={800}\n                                            graphData={graphDataRef.current} \n                                            enableZoomPanInteraction={true}\n                                            nodeLabel=\"state\"\n                                            nodeCanvasObject={({ state, x, y }, ctx) => {\n                                                ctx.fillStyle = getStateColor(state);\n                                                ctx.beginPath(); ctx.arc(x, y, 5, 0, 2 * Math.PI, false); ctx.fill(); // circle\n                                            }}\n                                        />\n                                    )}\n                                    <h3>Plot</h3>\n                                    <Dashboard data={plotData}/>     \n                                </Card>\n                            </Space>                            \n                        </Content>\n                    </Layout>\n                <Sider \n                    width={300} \n                    theme=\"light\"\n                    className=\"site-layout-background\"\n                    style={{\n                        overflow: 'auto',\n                        // overflowY: 'auto',\n                        height: '100vh',\n                        position: 'fixed',\n                        right: 0,\n                        // top: \"64px\",\n                        // paddingBottom: \"64px\",\n                        paddingTop: \"64px\",\n                      }}>\n                    <Button onClick={runTimeline} disabled={timeline === undefined} block>Run Demo</Button>\n                    <SimulationForm fetchData={fetchTimelineData}/>\n                    {/* <Button onClick={requestData} style={{marginLeft: \"78px\"}}>Request Data</Button> */}\n                </Sider>\n            </Layout>\n        </Layout>\n    )\n}\n\nexport default MainLayout;","/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/index.js",[],"/Users/aminamanafli/Documents/cs-project/cov-sim/ui/src/components/SimulationForm.js",["116","117","118","119","120"],"import React, { useState } from 'react';\nimport { Button, Collapse, Input, Radio, Select, Slider, Switch } from 'antd';\nimport Form from 'antd/lib/form/Form';\nimport FormItem from 'antd/lib/form/FormItem';\nimport FormList from 'antd/lib/form/FormList';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nconst { Panel } = Collapse;\nconst { Option } = Select;\nconst text = 'testing the collapse panels';\nconst layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16,\n    },\n  };\n\n\n  const formItemLayout = {\n    labelCol: {\n        span: 4,\n    },\n    wrapperCol: {\n        span: 24\n    },\n  };\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: { span: 24, offset: 4 },\n      sm: { span: 20, offset: 4 },\n    },\n  };\n\n\n\nfunction Region({fields, field, remove}) {\n    return(\n        <Collapse>\n            <Panel \n                header={`Community ${field.key}`} \n                key={field.key} \n                extra={\n                    fields.length > 1 ? (\n                    <MinusCircleOutlined\n                    className=\"dynamic-delete-button\"\n                    onClick={() => remove(field.name)} \n                    />) : null\n                    }\n            >\n                <FormItem\n                    {...formItemLayout}\n                    // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    // label={index === 0 ? 'Label' : ''}\n                    required={false}\n                    key={field.key}\n                    noStyle\n                >\n                    <FormItem\n                        {...field}\n                        label=\"Type\"\n                        labelCol={{span: 8}}\n                        wrapperCol={{span:20}}                        \n                        name={[field.name, 'graph_type']}\n                        fieldKey={[field.fieldKey, 'graph_type']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Radio.Group>\n                            <Radio.Button value=\"nw_small_world\">Small World</Radio.Button>\n                            <Radio.Button value=\"matrix\">Matrix</Radio.Button>\n                            <Radio.Button value=\"random-graph\">Random Graph</Radio.Button>\n                        </Radio.Group>\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Population\"\n                        labelCol={{span: 8}}\n                        wrapperCol={{span:20}}\n                        name={[field.name, 'population']}\n                        fieldKey={[field.fieldKey, 'population']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"region population\" style={{width: '80%'}} />\n                    </FormItem>\n\n                    <FormItem\n\n                        name={[field.name, 'connections']}\n                        fieldKey={[field.fieldKey, 'connections']}\n                        label=\"Connected to\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:20}}\n                        rules={[\n                        {\n                            required: false,\n                            message: 'Please select the connected regions!',\n                            type: 'array',\n                        },\n                        ]}\n                    >\n                        <Select mode=\"multiple\" placeholder=\"Please select favourite colors\">\n                            {fields.map(f => f.key === field.key ? null : (\n                                <Option value={f.key}>Region {f.key}</Option>\n                            ))}\n                        </Select>\n                    </FormItem>\n                </FormItem>\n            </Panel>\n        </Collapse>\n    )\n}\n\nfunction Vaccination() {\n    return(\n        <>\n            <FormItem \n                label=\"Strategy\"\n                name=\"vaccination_strategy\"\n            >\n                <Radio.Group>\n                    <Radio.Button value=\"random\">Random</Radio.Button>\n                    <Radio.Button value=\"uniform\">Uniform</Radio.Button>\n                    <Radio.Button value=\"high-density\">High Density</Radio.Button>\n                    <Radio.Button value=\"low-density\">Low Density</Radio.Button>\n\n\n                </Radio.Group>\n            </FormItem>\n            <FormItem\n                label=\"Start time\"\n                name=\"T_v\"\n            >\n                <Input />\n            </FormItem>\n            <FormItem\n                label=\"Vaccines available per time step\"\n                labelCol={{ span: 24 }}\n                name=\"n_v\"\n                style={{ display: 'flex', flexDirection: 'column', marginLeft: '11px'}}\n            >\n                <Input style={{width: '256px'}}/>\n            </FormItem>\n        </>\n    )\n}\n\nfunction AgentGroup({fields, field, remove}) {\n    const formatter = (value) => {\n        return `${value}%`;\n    }\n    const marks = {\n        0: '0',\n        20: '20',\n        40: '40',\n        60: '60',\n        80: '80',\n        100: '100',\n    }\n\n    return(\n        <Collapse>\n            <Panel header={`Group ${field.key}`} key={field.key}                 extra={\n                    fields.length > 1 ? (\n                    <MinusCircleOutlined\n                    className=\"dynamic-delete-button\"\n                    onClick={() => remove(field.name)} \n                    />) : null\n                    }> \n                <FormItem\n                    {...formItemLayout}\n                    // {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                    // label={index === 0 ? 'Label' : ''}\n                    required={false}\n                    key={field.key}\n                    noStyle\n                >\n                    <FormItem\n                        {...field}\n                        label=\"Infection Attempts\"\n                        labelCol={{span: 14}}\n                        wrapperCol={{span:20}}                        \n                        name={[field.name, 'n_i']}\n                        fieldKey={[field.fieldKey, 'n_i']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infection Attempts (Asymptomatic)\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:20}}                        \n                        name={[field.name, 'n_ai']}\n                        fieldKey={[field.fieldKey, 'n_ai']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Susceptibility\"\n                        labelCol={{span: 10}}\n                        wrapperCol={{span:24}}                        \n                        name={[field.name, 'susceptibility']}\n                        fieldKey={[field.fieldKey, 'susceptibility']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infectiousness\"\n                        labelCol={{span: 11}}\n                        wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_i']}\n                        fieldKey={[field.fieldKey, 'p_i']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infectiousness (Asymptomatic)\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_ai']}\n                        fieldKey={[field.fieldKey, 'p_ai']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Travel Probability\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_t']}\n                        fieldKey={[field.fieldKey, 'p_t']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Travel Probability (Asymptomatic)\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_at']}\n                        fieldKey={[field.fieldKey, 'p_at']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Vaccine Effectiveness\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'p_v']}\n                        fieldKey={[field.fieldKey, 'p_v']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Slider\n                        tipFormatter={formatter}\n                            marks={marks}\n                            />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Vaccine Duration\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'd_v']}\n                        fieldKey={[field.fieldKey, 'd_v']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infection Duration\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'd_i']}\n                        fieldKey={[field.fieldKey, 'd_i']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Infection Duration (Asymptomatic)\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'd_ai']}\n                        fieldKey={[field.fieldKey, 'd_ai']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                        <Input placeholder=\"\" style={{width: '80%'}} />\n                    </FormItem>\n                    <FormItem\n                        {...field}\n                        label=\"Probability of becoming asymptomatic\"\n                        labelCol={{span: 24}}\n                        // wrapperCol={{span:26}}                        \n                        name={[field.name, 'a_p']}\n                        fieldKey={[field.fieldKey, 'a_p']}\n                        validateTrigger={['onChange', 'onBlur']}\n                        // noStyle\n                    >\n                         <Slider   \n                            tipFormatter={formatter}\n                                marks={marks}\n                        />\n                    </FormItem>\n                </FormItem>\n            </Panel>\n        </Collapse>\n    )\n}\n\n\n\nfunction SimulationForm({fetchData}) {\n    const [vaccineOnOff, setVaccine] = useState(false);\n\n    const onFinish = (values) => {\n        console.log(\"Success:\", values);\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n    \n    const onVaccinationSwitch = (checked) => {\n        // console.log(\"vaccine was set to: \", vaccineOnOff)\n        // console.log(`switch to ${checked}`);\n        setVaccine(checked);\n        // console.log(\"vaccine is  set to: \", vaccineOnOff)\n    }\n\n    const [graphType, setGraphType] = React.useState('default');\n\n    const requestData = async (type) => {\n        const request = await fetch(\"/api/demo/nw-small-world\", {method: 'put'});\n        const response = await request.json();\n        // console.log(response);\n        // console.log(\"graph type: \", type);\n        // updateData(response);   \n    }\n\n    const handleSizeChange = e => {\n        // console.log(e.target.value);\n        fetchData(\"/api/demo/\" + e.target.value, \"post\", true);\n        // requestData(e.target.value);\n        // setSize(e.target.value);\n    };\n\n\n    return(\n        <>\n            <Form\n                {...layout}\n                name=\"basic\"\n                initialValues={{\n                    T: 100,\n                    regions: [{\n                        graph_type: \"nw_small_world\",\n                        population: \"12\",\n                        connections: []\n                    }],\n                    agent_groups: [\n                        {\n                            a_p: 30,\n                            d_ai: \"14\",\n                            d_i: \"13\",\n                            d_v: \"12\",\n                            n_ai: \"20\",\n                            n_i: \"10\",\n                            p_ai: 41,\n                            p_at: 50,\n                            p_i: 22,\n                            p_t: 38,\n                            p_v: 24\n                        }\n                    ]\n\n                }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n            > \n                <Collapse accordion ghost expandIconPosition=\"right\">\n                    <Panel header=\"Demo\" key=\"demo\">\n                        <Radio.Group value={graphType} onChange={handleSizeChange}>\n                            <Radio.Button value=\"nw-small-world\">Newman-Watts Small World Graph</Radio.Button>\n                            {/* <Radio.Button value=\"matrix\">Matrix-based Graph</Radio.Button> */}\n                            <Radio.Button value=\"random\">Randomly Generated Graph</Radio.Button>\n                        </Radio.Group>\n                    </Panel>\n                    <Panel header=\"General Settings\" key=\"gen-set\">\n                        <FormItem \n                            label=\"Timesteps\"\n                            name=\"T\"\n                        >\n                            <Input />\n                        </FormItem>\n                        <FormItem \n                            label=\"Initial Infections\"\n                            labelCol= {{span: 11}}\n                            name=\"initial_infections\"\n                        >\n                            <Input />\n                        </FormItem>\n                        <FormItem \n                            label=\"Vaccination\"\n                            name=\"isVaccinating\"\n                        >\n                            <Switch onChange={onVaccinationSwitch}/>\n                        </FormItem>\n                        {\n                            vaccineOnOff && <Vaccination />\n                        }\n                    </Panel>\n                    <Panel header=\"Communities\" key=\"regions-set\"> \n                        <FormList\n                            name=\"regions\"\n                        >\n                            {(fields, {add, remove}, { errors }) => (\n                                <>\n                                    <Collapse accordion>\n\n                                    {fields.map((field, index) => (\n                                        <Region fields={fields} field={field} remove={remove}/>\n                                    ))}\n                                    </Collapse>\n                                    <FormItem>\n                                        <Button\n                                            type=\"dashed\"\n                                            onClick={() => add()}\n                                            style={{width: '100%'}}\n                                            icon={<PlusOutlined />}\n                                        >\n                                            Add Region\n                                        </Button>\n                                    </FormItem>\n                                </>\n                            )}    \n                        </FormList>    \n\n                    </Panel>\n                    <Panel header=\"Agent Groups\" key=\"groups-set\">    \n                        <FormList\n                            name=\"agent_groups\"\n                        >\n                            {(fields, {add, remove}, { errors }) => (\n                                <>\n                                    <Collapse accordion>\n                                    {fields.map((field, index) => (\n                                        <AgentGroup fields={fields} field={field} remove={remove}/>\n                                    ))}\n                                    </Collapse>\n                                    <FormItem>\n                                        <Button\n                                            type=\"dashed\"\n                                            onClick={() => add()}\n                                            style={{width: '100%'}}\n                                            icon={<PlusOutlined />}\n                                        >\n                                            Add Group\n                                        </Button>\n                                    </FormItem>\n                                </>\n                            )}    \n                        </FormList>  \n                    </Panel>\n                </Collapse>\n                 \n                <FormItem {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </FormItem>   \n            </Form>\n\n        </>\n    );\n}\n\nexport default SimulationForm;\n",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":2,"column":17,"nodeType":"127","messageId":"128","endLine":2,"endColumn":28},{"ruleId":"125","severity":1,"message":"129","line":2,"column":30,"nodeType":"127","messageId":"128","endLine":2,"endColumn":39},{"ruleId":"125","severity":1,"message":"130","line":2,"column":41,"nodeType":"127","messageId":"128","endLine":2,"endColumn":47},{"ruleId":"125","severity":1,"message":"131","line":2,"column":49,"nodeType":"127","messageId":"128","endLine":2,"endColumn":57},{"ruleId":"125","severity":1,"message":"132","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":14},{"ruleId":"125","severity":1,"message":"133","line":4,"column":13,"nodeType":"127","messageId":"128","endLine":4,"endColumn":15},{"ruleId":"125","severity":1,"message":"134","line":5,"column":8,"nodeType":"127","messageId":"128","endLine":5,"endColumn":16},{"ruleId":"125","severity":1,"message":"135","line":6,"column":10,"nodeType":"127","messageId":"128","endLine":6,"endColumn":13},{"ruleId":"125","severity":1,"message":"136","line":7,"column":8,"nodeType":"127","messageId":"128","endLine":7,"endColumn":12},{"ruleId":"125","severity":1,"message":"137","line":9,"column":8,"nodeType":"127","messageId":"128","endLine":9,"endColumn":17},{"ruleId":"125","severity":1,"message":"138","line":25,"column":7,"nodeType":"127","messageId":"128","endLine":25,"endColumn":13},{"ruleId":"125","severity":1,"message":"139","line":28,"column":7,"nodeType":"127","messageId":"128","endLine":28,"endColumn":17},{"ruleId":"125","severity":1,"message":"140","line":29,"column":9,"nodeType":"127","messageId":"128","endLine":29,"endColumn":17},{"ruleId":"125","severity":1,"message":"141","line":8,"column":15,"nodeType":"127","messageId":"128","endLine":8,"endColumn":18},{"ruleId":"142","severity":1,"message":"143","line":12,"column":8,"nodeType":"144","endLine":12,"endColumn":10,"suggestions":"145"},{"ruleId":"142","severity":1,"message":"146","line":16,"column":8,"nodeType":"144","endLine":16,"endColumn":14,"suggestions":"147"},{"ruleId":"125","severity":1,"message":"148","line":31,"column":23,"nodeType":"127","messageId":"128","endLine":31,"endColumn":30},{"ruleId":"125","severity":1,"message":"126","line":2,"column":17,"nodeType":"127","messageId":"128","endLine":2,"endColumn":28},{"ruleId":"125","severity":1,"message":"129","line":2,"column":30,"nodeType":"127","messageId":"128","endLine":2,"endColumn":39},{"ruleId":"125","severity":1,"message":"130","line":2,"column":41,"nodeType":"127","messageId":"128","endLine":2,"endColumn":47},{"ruleId":"125","severity":1,"message":"131","line":2,"column":49,"nodeType":"127","messageId":"128","endLine":2,"endColumn":57},{"ruleId":"125","severity":1,"message":"149","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":20},{"ruleId":"125","severity":1,"message":"150","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":17},{"ruleId":"125","severity":1,"message":"138","line":20,"column":7,"nodeType":"127","messageId":"128","endLine":20,"endColumn":13},{"ruleId":"125","severity":1,"message":"151","line":21,"column":7,"nodeType":"127","messageId":"128","endLine":21,"endColumn":15},{"ruleId":"125","severity":1,"message":"139","line":23,"column":7,"nodeType":"127","messageId":"128","endLine":23,"endColumn":17},{"ruleId":"125","severity":1,"message":"140","line":24,"column":9,"nodeType":"127","messageId":"128","endLine":24,"endColumn":17},{"ruleId":"125","severity":1,"message":"152","line":27,"column":9,"nodeType":"127","messageId":"128","endLine":27,"endColumn":22},{"ruleId":"125","severity":1,"message":"153","line":45,"column":9,"nodeType":"127","messageId":"128","endLine":45,"endColumn":14},{"ruleId":"121","replacedBy":"154"},{"ruleId":"123","replacedBy":"155"},{"ruleId":"125","severity":1,"message":"156","line":3,"column":10,"nodeType":"127","messageId":"128","endLine":3,"endColumn":21},{"ruleId":"125","severity":1,"message":"157","line":3,"column":23,"nodeType":"127","messageId":"128","endLine":3,"endColumn":42},{"ruleId":"125","severity":1,"message":"158","line":3,"column":44,"nodeType":"127","messageId":"128","endLine":3,"endColumn":54},{"ruleId":"125","severity":1,"message":"159","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":16},{"ruleId":"125","severity":1,"message":"160","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":15},{"ruleId":"125","severity":1,"message":"161","line":4,"column":57,"nodeType":"127","messageId":"128","endLine":4,"endColumn":63},{"ruleId":"125","severity":1,"message":"162","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":22},{"ruleId":"125","severity":1,"message":"163","line":5,"column":24,"nodeType":"127","messageId":"128","endLine":5,"endColumn":38},{"ruleId":"125","severity":1,"message":"164","line":5,"column":40,"nodeType":"127","messageId":"128","endLine":5,"endColumn":60},{"ruleId":"125","severity":1,"message":"165","line":15,"column":9,"nodeType":"127","messageId":"128","endLine":15,"endColumn":16},{"ruleId":"125","severity":1,"message":"151","line":17,"column":5,"nodeType":"127","messageId":"128","endLine":17,"endColumn":13},{"ruleId":"125","severity":1,"message":"139","line":52,"column":5,"nodeType":"127","messageId":"128","endLine":52,"endColumn":15},{"ruleId":"125","severity":1,"message":"166","line":53,"column":7,"nodeType":"127","messageId":"128","endLine":53,"endColumn":19},{"ruleId":"142","severity":1,"message":"167","line":163,"column":8,"nodeType":"144","endLine":163,"endColumn":18,"suggestions":"168"},{"ruleId":"142","severity":1,"message":"169","line":176,"column":15,"nodeType":"170","endLine":178,"endColumn":6},{"ruleId":"142","severity":1,"message":"171","line":178,"column":8,"nodeType":"144","endLine":178,"endColumn":10,"suggestions":"172"},{"ruleId":"142","severity":1,"message":"173","line":206,"column":8,"nodeType":"144","endLine":206,"endColumn":18,"suggestions":"174"},{"ruleId":"125","severity":1,"message":"175","line":209,"column":11,"nodeType":"127","messageId":"128","endLine":209,"endColumn":22},{"ruleId":"125","severity":1,"message":"176","line":9,"column":7,"nodeType":"127","messageId":"128","endLine":9,"endColumn":11},{"ruleId":"125","severity":1,"message":"177","line":34,"column":9,"nodeType":"127","messageId":"128","endLine":34,"endColumn":35},{"ruleId":"125","severity":1,"message":"178","line":373,"column":23,"nodeType":"127","messageId":"128","endLine":373,"endColumn":35},{"ruleId":"125","severity":1,"message":"175","line":375,"column":11,"nodeType":"127","messageId":"128","endLine":375,"endColumn":22},{"ruleId":"125","severity":1,"message":"179","line":377,"column":15,"nodeType":"127","messageId":"128","endLine":377,"endColumn":23},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'Circle' is defined but never used.","'d3' is defined but never used.","'BarChart' is defined but never used.","'svg' is defined but never used.","'data' is defined but never used.","'LineGraph' is defined but never used.","'myData' is assigned a value but never used.","'randomData' is assigned a value but never used.","'getColor' is assigned a value but never used.","'svg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.","ArrayExpression",["182"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["183"],"'average' is assigned a value but never used.","'ForceGraph2D' is defined but never used.","'Dashboard' is defined but never used.","'testData' is assigned a value but never used.","'getStateColor' is assigned a value but never used.","'fgRef' is assigned a value but never used.",["180"],["181"],"'managerData' is defined but never used.","'nationalAverageData' is defined but never used.","'yearLabels' is defined but never used.","'Button' is defined but never used.","'classes' is defined but never used.","'Switch' is defined but never used.","'UserOutlined' is defined but never used.","'LaptopOutlined' is defined but never used.","'NotificationOutlined' is defined but never used.","'SubMenu' is assigned a value but never used.","'initPlotData' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'updateData'. Either include it or remove the dependency array.",["184"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["185"],"React Hook useCallback has missing dependencies: 'timeline' and 'updateData'. Either include them or remove the dependency array.",["186"],"'requestData' is assigned a value but never used.","'text' is assigned a value but never used.","'formItemLayoutWithOutLabel' is assigned a value but never used.","'setGraphType' is assigned a value but never used.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [height, width]",{"range":"197","text":"198"},"Update the dependencies array to be: [data, draw]",{"range":"199","text":"200"},"Update the dependencies array to be: [plotData, updateData]",{"range":"201","text":"202"},"Update the dependencies array to be: [fetchData]",{"range":"203","text":"204"},"Update the dependencies array to be: [plotData, timeline, updateData]",{"range":"205","text":"206"},[338,340],"[height, width]",[389,395],"[data, draw]",[5231,5241],"[plotData, updateData]",[5720,5722],"[fetchData]",[6667,6677],"[plotData, timeline, updateData]"]